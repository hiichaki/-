#include <iostream>
#include <stdlib.h>
using namespace std;

template <class SC> class List // ?????? ?????? ???????
{
struct Element // ????????? ?????????????? ????????? ??????? ??????
    {
    SC data; // ?????????? ??????????? ??? ???????? ?????? ? ???????? ??????
    Element *next; // ????????? ?? ????????? ??????? ??????
    Element *prev; // ????????? ?? ?????????? ??????? ??????
    };
    private: // ?????? ????????? ??? ??????
    Element *Head; // ????????? ?????? ???????????  ???????
    Element *Curr; // ????????? ?? ??????? ???????
    public: // ?????? ? ?????? ????????? ??? ???????????? ??????
    int length; // ?????????? ????????? ? ??????

    List(); // ???????????
    List (SC x);	 // ??????????? ? ??????????
    List(const List<SC> &C); // ??????????? ?????
    ~List(); // ??????????
    void  init(); // ??????? ??????? ????????? ?? ??????
    void  push(SC data); // ????????? ????? ??????? ? ??????
    SC  pop(); // ????????? ??????? ???????
    void  delFromData(SC adr); // ??????? ? ??????? ??????? ?????????? ?????????? ?????? 
    void  loop(); // ??????? ???? ?????? ? ???????
    void  clear(); // ???????? ???? ??????
    void  next(); // ??????? ? ?????????? ????????
    void  prev(); // ??????? ? ??????????? ????????
    int  isNoEmpty(); // ???????? ????????? ?????? (???? ?????? ?? ????)
    SC  lp(); // ???????? ???????? ???????? ???????? ?????? ?? ?????? ???
    void  operator +(SC v); // ?????????????? ???????? + ??? ?????????? ?????? ????????
    void  sort(); // ?????????? ?????? 
    void  past(List<SC> &a); // ???????? ? ?????? ??? ???????? ??????? ??????
    };

template <class SC> List() // ?????????? ????????????
    {
      Head =NULL; // ???????? ????????? ?? ?????? ???????
      Curr=NULL; // ???????? ????????? ?? ??????? ???????
      length=0; // ???????? ?????????? ????????? ? ??????
    }
template <class SC> List (SC x) // ?????????? ???????????? ? ??????????
    {
      Head=NULL; // ???????? ????????? ?? ?????? ???????
      Curr=NULL; // ???????? ????????? ?? ??????? ???????
      length=0; // ???????? ?????????? ????????? ? ??????
      push(x); // ????????? ? ?????? ??????? ? ???????, ??????????? ? ??????????? 
    }
template <class SC> List(const List<SC> &C) // ?????????? ???????????? ?????	
      {
      this->Head=NULL; // ???????? ????????? ?? ?????? ???????
      this->Curr=NULL; // ???????? ????????? ?? ??????? ???????
      this->length=0; // ???????? ?????????? ????????? ? ??????
      Element *p=C.Curr;	 // ????????? ????????? ?? ??????? ??????? ?????? 
						 // ????????????? ?????????? ? ???????????
      for(int i=0;i<C.length;i++) // ??????? ???? ?? ?????????? ????????? ??????-?????????
		{ 
			push(p->data); // ????????? ? ?????? ??????? ??????? ??????-?????????
			p=p->next; // ????????? ? ?????????? ???????? ??????-?????????
		}
        }
template <class SC> ~List() // ?????????? ??????????? 
	{
        clear(); // ???????? ??????
	}
template <class SC> void init() //  ?????????? ?????? ? ????????? ??????? ??????? - ?????? ?? ????????? 
	{
	  Curr=Head; // ????????????? ??????? ??????? ?? ?????? ?? ?????????
	}
template <class SC> void delFromData(SC adr) // ?????????? ???????? ???????? ?????? ? ??????? ?? ???????????
        {
            if(isNoEmpty())	// ???? ?????? ?? ????
                {
                    Element *tmp=Curr; // ????????? ????????? ?? ??????? ??????? ? ??????
                    for(int i=0;i<length;i++)  // ??????? ???? ?? ?????????? ?????????
                    {
						if(Curr->data==adr) // ???? ?????????? ???????? ???????? - ???????
						{
						if(Curr==tmp) // ???? ??????? ???????? ????????? ? ??????? ????????? ?? ??????
						tmp=tmp->next; // ?????????? ????????? ????????? ?? ????????? ??????? ??????
						pop(); // ??????? ????????
						}
						next(); // ??????? ? ?????????? ????????
					}
                    Curr=tmp;  // ??????? ????????? ???????? ???????? ?? ??????? ?????????
                }
        }
template <class SC> void next() // ?????????? ???????? ? ?????????? ????????
	{
	  if(isNoEmpty()) // ???? ?????? ?? ????
			Curr=Curr->next; // ?????????? ??????? ??????? ?? ?????????
	}
template <class SC> void prev() // ?????????? ???????? ? ??????????? ????????
	{
	if(isEmpty()) // ???? ?????? ?? ????
			Curr=Curr->prev; // ?????????? ??????? ??????? ?? ??????????
	}
template <class SC> int isNoEmpty() // ?????????? ???????? ?????? ?? ??????? ?????????
	{
	  if (Curr==NULL ) // ???? ??????? ??????? ????? ??????? ????????
			return 0; // ??????? "????"
	  else // ?????
			return 1; // ??????? "??????"
	}
template <class SC> SC lp() // ?????????? ????????? ???????? ???????? ????????
	{
	  if(isNoEmpty()) // ???? ?????? ?? ????
			return Curr->data; // ??????? ?????? ???????? ????????
	  else // ????? 
			return 0; // ??????? "????"
	}
template <class SC> void List<SC>:: push (SC data)	// ?????????? ?????????? ????????
	{
    Element *inserted; // ??????? ????? ????????? ?? ???????
    inserted= new Element;	// ???????? ?????? ??? ???????
    inserted->data=data; // ?????????? ??????? ???????? ? ???? ?????? ????????
    if (!isNoEmpty()) // ???? ??????  ????
    {
        Head=inserted; // ?????????? ????????? ??????? ???????? ?? ????? ???????
        Curr=inserted; // ?????????? ????????? ???????? ???????? ?? ????? ???????
        Curr->next=inserted; // ?????????? ????????? ?????????? ???????? ?? ????? ???????
        Curr->prev=inserted; // ?????????? ????????? ??????????? ???????? ?? ????? ???????
    }
    else // ???? ?????? ?? ????
    {
        inserted->next=Curr->next; // ?????????????? ????????? ?????????? ???????? ? ???????????
        inserted->next->prev=inserted;	// ?????????????? ????????? ?????????? ???????? ?? ???????????
        Curr->next=inserted;  // ?????????????? ????????? ????????? ?? ???????????
        inserted->prev=Curr;  // ?????????????? ?????????? ???????????? ?? ???????
    }
    length++; // ??????????? ?????????? ????????? ? ??????
    Curr=inserted; // ????????????? ??????? ????????? ?? ???????????
}
template <class SC> SC List<SC>::pop () // ??????????  ?????????? ???????? ????????
{
    SC tag; // ?????????? ??? ???????????? ????????
    if (!isNoEmpty()) return 0; // ???? ?????? ???? ??????? "????"
    Element *temp=Curr; // ????????? ????????? ?? ??????? ???????
    tag=temp->data; // ??????????? ?????????? ???????? ?????? ???????? ????????
    if (length==1) // ???? ??????? ???????????? ? ??????
    {
        Head=NULL; // ???????? ???????? ??????? ????????
        Curr=NULL; // ???????? ???????? ???????? ????????
    }
    else // ???? ??????? ?? ????????????
        {
        Curr->next->prev=Curr->prev; // ????????? ????????? ? ??????????
        Curr->prev->next=Curr->next; // ????????? ?????????? ? ?????????
        Curr=Curr->next; // ?????????????? ??????? ??????? ?? ?????????
        }
    if(temp==Head) // ???? ????????? ??????? - ?????? ???????????
		Head=Head->next; // ????????????? ?????? ?? ?????????
    length--;  // ????????? ?????????? ?????????
    delete temp; // ??????? ?????????? ??????? ???????
    return tag; // ??????? ?????? ?????????? ????????
}
template <class SC> void List<SC>::loop() // ?????????? ?????? ???? ????????? ??????
{
    if (isNoEmpty()) // ???? ?????? ?? ????
	{
        Element *tempCar=Head; // ????????? ????????? ?? ??????? ???????
        for (int i=0;i<length;i++) // ??????? ???? ?? ?????????? ????????? ??????
		{ 
		cout <<tempCar->data <<" "; // ??????? ?????? ???????? ????????
		tempCar=tempCar->next ; // ????????? ? ?????????? ????????
		} 
		cout << "\n"; // ????? ????????????? ???????
	}
    else // ???? ?????? ????
        cout<< "List is empty\n"; // ??????? ?????????????? 
}
template <class SC> void List<SC>::clear() // ?????????? ??????? ????? ??????
{
    for(int i=0;i<length;) // ??????? ???? ?? ?????????? ????????? ??????
		pop(); // ????????? ??????? ???????
}
template <class SC> void List<SC>::operator + (SC v) // ??????????????? ????????? ?????
{
    push(v); // ????????? ???????? ? ??????
}
template <class SC> void List<SC>::sort() // ?????????? ?????????? ??????
{
 SC Temp; // ????????? ?????????? ??? ??????
 int i,j; // ???????? ?????
 for (j=0;j<length-1;j++) // ??????? ???? ?? ?????????? ????????? ????? 1
	{
		init();  // ????????????? ??????? ??????? ?? ?????? ???????										
		for(i=0;i<length-1;i++)	// ??????? ????????? ???? ?? ?????????? ????????? ????? 1
		{
		if(Curr->data > Curr->next->data) // ???? ?????? ???????? ???????? ?????? ?????? ?????????? 
			{ 
			Temp=pop(); // ??????? ???????
			next(); // ??????? ? ??????????
			push(Temp);	 // ???????? ??????
			}
		else // ???? ?????? ???????? ???????? ?????? ?????? ??????????
			next(); // ??????? ? ??????????
		}
        i=0;  // ???????? ???????
	}
}
template <class SC> void List<SC>::past(List<SC> &a) // ??????? ?????? ?????? ? ??????
{
init(); // ????????????? ??????? ??????? ?? ??????
a.init(); // ????????????? ??????? ??????? ?? ?????? ? ?????? - ?????????
int i; // ??????????? ??????????
for(i=0;i<a.length;)  // ??????? ???? ?? ?????????? ????????? ??????-?????????
	{
		if(a.Curr->data<Curr->data)  // ???? ?????? ????????? ?????? ?????? ???????? ???????? ??????
		{
            prev(); // ??????? ? ??????????? ? ???????? ??????
            push(a.Curr->data); // ???????? ? ?????? ?????? ???????? ???????? ??????-?????????
            a.next(); // ??????? ? ?????????? ???????? ??????-?????????
            next(); // ??????? ? ?????????? ???????? ????????? ??????
            i++;  // ????????? ????????
		}
        else // ???? ?????? ????????? ?? ?????? ?????? ???????? ???????? ??????
	    next(); // ??????? ? ?????????? ???????? ??????
	}       
}


int main(){
List<int>a;
a.
	
		
}
